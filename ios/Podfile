require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

source 'https://cdn.cocoapods.org/'
platform :ios, '11.0'

if ENV['USE_FRAMEWORKS'] == '1'
  puts "Installing pods with use_frameworks!"
  use_frameworks!
end

def pods(options = {})
  config = use_native_modules!

  fabric_enabled = false
  if ENV['USE_FABRIC'] == '1'
    puts "Building rn-demo-app with Fabric enabled."
    fabric_enabled = true
  end

  if options[:use_codegen]
    Pod::UI.puts "[Codegen] Building target with codegen library discovery enabled."
    pre_install do |installer|
      use_react_native_codegen_discovery!({react_native_path: config[:reactNativePath], app_path: "#{Dir.pwd}/..", fabric_enabled: fabric_enabled})
    end
  end

  use_react_native!(path: config[:reactNativePath], fabric_enabled: fabric_enabled, hermes_enabled: true)
end

target 'rnDemoApp' do
  # TODO: Ideally, we don't use this roundabout way of enabling the codegen. But this way we can re-use the react_native_path config
  pods({ :use_codegen => ENV['USE_CODEGEN_DISCOVERY'] == '1' })

  # Enables Flipper.
  #
  # Note that if you have use_frameworks! enabled, Flipper will not work and
  # you should disable the next line.
  use_flipper!

  post_install do |installer|
    flipper_post_install(installer)
  end
end

target 'rnDemoAppTests' do
  pods()
  # Pods for testing
end

def frameworks_pre_install(installer)
  static_frameworks = ['FlipperKit', 'Flipper', 'Flipper-Folly',
      'CocoaAsyncSocket', 'ComponentKit', 'Flipper-DoubleConversion',
      'Flipper-Glog', 'Flipper-PeerTalk', 'Flipper-RSocket',
      'CocoaLibEvent', 'OpenSSL-Universal', 'boost-for-react-native']

  Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}
  installer.pod_targets.each do |pod|
    if static_frameworks.include?(pod.name)
      def pod.build_type
        Pod::BuildType.static_library
      end
    end
  end
end
