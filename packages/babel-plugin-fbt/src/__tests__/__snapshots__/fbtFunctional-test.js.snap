// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should accept well-formed options" 1`] = `
Array [
  Object {
    "author": "jwatson",
    "col_beg": 2,
    "col_end": 8,
    "desc": "options!",
    "filepath": undefined,
    "jsfbt": "A string that moved files",
    "line_beg": 2,
    "line_end": 5,
    "project": "Super Secret",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should be able to nest within React nodes" 1`] = `
Array [
  Object {
    "col_beg": 20,
    "col_end": 55,
    "desc": "nested!",
    "filepath": undefined,
    "jsfbt": "A nested string",
    "line_beg": 3,
    "line_end": 3,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should convert simple strings" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "It's simple",
    "filepath": undefined,
    "jsfbt": "A simple string",
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 18,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should get project from docblock" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 52,
    "desc": "It's simple",
    "filepath": undefined,
    "jsfbt": "Also simple string",
    "line_beg": 2,
    "line_end": 2,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle duplicate enums" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 19,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle enums (with array values)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enum as an array",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Click to see groups",
        "photos": "Click to see photos",
        "videos": "Click to see videos",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle enums (with value map)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enum as an object",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "id1",
            "id2",
            "id3",
          ],
        },
      ],
      "t": Object {
        "id1": "Click to see groups",
        "id2": "Click to see photos",
        "id3": "Click to see videos",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle enums with more text after" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Hello, groups!",
        "photos": "Hello, photos!",
        "videos": "Hello, videos!",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 2,
        },
        Object {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "There are {number} likes",
        },
        "_1": Object {
          "_1": "There is a like",
        },
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle names" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "names",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "name",
          "type": 1,
        },
      ],
      "t": Object {
        "*": "You just friended {name}",
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle object pronoun" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "object pronoun",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 3,
        },
      ],
      "t": Object {
        "*": "I know them.",
        "0": "I know this.",
        "1": "I know her.",
        "2": "I know him.",
      },
    },
    "line_beg": 2,
    "line_end": 9,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle params" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "Moar params",
    "filepath": undefined,
    "jsfbt": "A parameterized message to {personName}",
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle plurals that have different count variables" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
        Object {
          "singular": true,
          "token": "dog_token",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "{cat_token} cats and {dog_token} dogs",
          "_1": "{cat_token} cats and 1 dog",
        },
        "_1": Object {
          "*": "1 cat and {dog_token} dogs",
          "_1": "1 cat and 1 dog",
        },
      },
    },
    "line_beg": 2,
    "line_end": 9,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle plurals that share the same count variable" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 2,
        },
        Object {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "There were {number} likes",
        },
        "_1": Object {
          "_1": "There was a like",
        },
      },
    },
    "line_beg": 2,
    "line_end": 9,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle possessive pronoun" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "possessive pronoun",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 3,
        },
      ],
      "t": Object {
        "*": "It is their birthday.",
        "1": "It is her birthday.",
        "2": "It is his birthday.",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle subject and reflexive pronouns" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "subject+reflexive pronouns",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 3,
        },
        Object {
          "type": 3,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "They wished themselves a happy birthday.",
        },
        "1": Object {
          "1": "She wished herself a happy birthday.",
        },
        "2": Object {
          "2": "He wished himself a happy birthday.",
        },
      },
    },
    "line_beg": 2,
    "line_end": 9,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle variations + same param" 1`] = `
Array [
  Object {
    "col_beg": 6,
    "col_end": 7,
    "desc": "test variations + sameParam",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "count",
          "type": 2,
        },
      ],
      "t": Object {
        "*": "You have {count} likes. Comment on it to get more than {count} likes",
      },
    },
    "line_beg": 3,
    "line_end": 11,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle variations" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "variations!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "count",
          "type": 2,
        },
      ],
      "t": Object {
        "*": "Click to see {count} links",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handler wrapping parens" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "text",
  },
  Object {
    "col_beg": 14,
    "col_end": 7,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 8,
    "line_end": 13,
    "project": "",
    "type": "text",
  },
  Object {
    "col_beg": 14,
    "col_end": 7,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 14,
    "line_end": 19,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "d",
    "filepath": undefined,
    "jsfbt": "{name1} and {name1}",
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should maintain intra-argument newlines" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "a",
    "filepath": undefined,
    "jsfbt": "{name1} blah {name2}",
    "line_beg": 2,
    "line_end": 17,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should maintain newlines when using string templates" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "blah",
    "filepath": undefined,
    "jsfbt": "A simple string... with some other stuff.",
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data (react native) for scenario "should maintain newlines within arguments" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "a",
    "filepath": undefined,
    "jsfbt": "a b {name1} c d {name2} e",
    "line_beg": 2,
    "line_end": 13,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should accept well-formed options" 1`] = `
Array [
  Object {
    "author": "jwatson",
    "col_beg": 2,
    "col_end": 8,
    "desc": "options!",
    "filepath": undefined,
    "jsfbt": "A string that moved files",
    "line_beg": 2,
    "line_end": 5,
    "project": "Super Secret",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should be able to nest within React nodes" 1`] = `
Array [
  Object {
    "col_beg": 20,
    "col_end": 55,
    "desc": "nested!",
    "filepath": undefined,
    "jsfbt": "A nested string",
    "line_beg": 3,
    "line_end": 3,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should convert simple strings" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "It's simple",
    "filepath": undefined,
    "jsfbt": "A simple string",
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 18,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should get project from docblock" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 52,
    "desc": "It's simple",
    "filepath": undefined,
    "jsfbt": "Also simple string",
    "line_beg": 2,
    "line_end": 2,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle duplicate enums" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 19,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with array values)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enum as an array",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Click to see groups",
        "photos": "Click to see photos",
        "videos": "Click to see videos",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with value map)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enum as an object",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "id1": "Click to see groups",
        "id2": "Click to see photos",
        "id3": "Click to see videos",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle enums with more text after" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Hello, groups!",
        "photos": "Hello, photos!",
        "videos": "Hello, videos!",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
        Object {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "There are {number} likes",
        },
        "_1": Object {
          "_1": "There is a like",
        },
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle names" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "names",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "name",
          "type": 1,
        },
      ],
      "t": Object {
        "*": "You just friended {name}",
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle object pronoun" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "object pronoun",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "*": "I know them.",
        "0": "I know this.",
        "1": "I know her.",
        "2": "I know him.",
      },
    },
    "line_beg": 2,
    "line_end": 9,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle params" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "Moar params",
    "filepath": undefined,
    "jsfbt": "A parameterized message to {personName}",
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle plurals that have different count variables" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
        Object {
          "singular": true,
          "token": "dog_token",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "{cat_token} cats and {dog_token} dogs",
          "_1": "{cat_token} cats and 1 dog",
        },
        "_1": Object {
          "*": "1 cat and {dog_token} dogs",
          "_1": "1 cat and 1 dog",
        },
      },
    },
    "line_beg": 2,
    "line_end": 9,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle plurals that share the same count variable" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
        Object {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "There were {number} likes",
        },
        "_1": Object {
          "_1": "There was a like",
        },
      },
    },
    "line_beg": 2,
    "line_end": 9,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle possessive pronoun" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "possessive pronoun",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "*": "It is their birthday.",
        "1": "It is her birthday.",
        "2": "It is his birthday.",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle subject and reflexive pronouns" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "subject+reflexive pronouns",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
        null,
      ],
      "t": Object {
        "*": Object {
          "*": "They wished themselves a happy birthday.",
        },
        "1": Object {
          "1": "She wished herself a happy birthday.",
        },
        "2": Object {
          "2": "He wished himself a happy birthday.",
        },
      },
    },
    "line_beg": 2,
    "line_end": 9,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle variations + same param" 1`] = `
Array [
  Object {
    "col_beg": 6,
    "col_end": 7,
    "desc": "test variations + sameParam",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "count",
          "type": 2,
        },
      ],
      "t": Object {
        "*": "You have {count} likes. Comment on it to get more than {count} likes",
      },
    },
    "line_beg": 3,
    "line_end": 11,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle variations" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "variations!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "count",
          "type": 2,
        },
      ],
      "t": Object {
        "*": "Click to see {count} links",
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handler wrapping parens" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "text",
  },
  Object {
    "col_beg": 14,
    "col_end": 7,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 8,
    "line_end": 13,
    "project": "",
    "type": "text",
  },
  Object {
    "col_beg": 14,
    "col_end": 7,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 14,
    "line_end": 19,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "d",
    "filepath": undefined,
    "jsfbt": "{name1} and {name1}",
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should maintain intra-argument newlines" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "a",
    "filepath": undefined,
    "jsfbt": "{name1} blah {name2}",
    "line_beg": 2,
    "line_end": 17,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines when using string templates" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "blah",
    "filepath": undefined,
    "jsfbt": "A simple string... with some other stuff.",
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines within arguments" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "a",
    "filepath": undefined,
    "jsfbt": "a b {name1} c d {name2} e",
    "line_beg": 2,
    "line_end": 13,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": "jwatson",
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "Super Secret",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle a JSX fragment nested with fbt.param as an argument" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A1', <a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, 'A2'], 'nested!', {
  subject: subjectValue
})",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A1'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "subjectValue",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
        GenderStringVariationArg {
          "__nodeCode": "subjectValue",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [
        FbtTextNode {
          "__nodeCode": "B1",
          "__stringVariationArgs": Array [],
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtImplicitParamNode {
          "__nodeCode": "<b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>",
          "__stringVariationArgs": Array [
            GenderStringVariationArg {
              "__nodeCode": "subjectValue",
              "node": "BabelNode[type=Identifier]",
              "value": undefined,
            },
          ],
          "_variationFactorValues": Array [],
          "children": Array [
            FbtTextNode {
              "__nodeCode": "C1",
              "__stringVariationArgs": Array [],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": Array [],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtParamNode {
              "__nodeCode": "fbt.param('paramName', paramValue)",
              "__stringVariationArgs": Array [],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": Object {
                "gender": null,
                "name": "paramName",
                "number": null,
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "C2",
              "__stringVariationArgs": Array [],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
          ],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtTextNode {
          "__nodeCode": "B2",
          "__stringVariationArgs": Array [],
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
      ],
      "moduleName": "fbt",
      "node": "BabelNode[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'A2'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "__subjectCode": "subjectValue",
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": "BabelNode[type=Identifier]",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'id1'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'id1'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'id1'",
        "range": Object {
          "id1": "groups",
          "id2": "photos",
          "id3": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "are ",
        "name": "number",
        "showCount": null,
        "value": null,
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "__valueCode": "personname",
        "gender": "BabelNode[type=Identifier]",
        "name": "name",
        "value": "BabelNode[type=Identifier]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": null,
        "type": "object",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "personName",
        "number": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "catCount",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "dogCount",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "catCount",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "catCount",
        "count": "BabelNode[type=Identifier]",
        "many": null,
        "name": "cat_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "dogCount",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "dogCount",
        "count": "BabelNode[type=Identifier]",
        "many": null,
        "name": "dog_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "were ",
        "name": "number",
        "showCount": "no",
        "value": null,
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": null,
        "type": "possessive",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": true,
        "gender": "BabelNode[type=Identifier]",
        "human": true,
        "type": "subject",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": true,
        "type": "reflexive",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "node": null,
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "node": null,
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "count",
        "number": true,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "node": null,
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "node": null,
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "count",
        "number": true,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
                bar
              </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
                bar
              </a> : qux)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name2",
        "number": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name2",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": "jwatson",
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "Super Secret",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle a JSX fragment nested with fbt.param as an argument" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A1', <a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, 'A2'], 'nested!', {
  subject: subjectValue
})",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A1'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "subjectValue",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
        GenderStringVariationArg {
          "__nodeCode": "subjectValue",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [
        FbtTextNode {
          "__nodeCode": "B1",
          "__stringVariationArgs": Array [],
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtImplicitParamNode {
          "__nodeCode": "<b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>",
          "__stringVariationArgs": Array [
            GenderStringVariationArg {
              "__nodeCode": "subjectValue",
              "node": "BabelNode[type=Identifier]",
              "value": undefined,
            },
          ],
          "_variationFactorValues": Array [],
          "children": Array [
            FbtTextNode {
              "__nodeCode": "C1",
              "__stringVariationArgs": Array [],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": Array [],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtParamNode {
              "__nodeCode": "fbt.param('paramName', paramValue)",
              "__stringVariationArgs": Array [],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": Object {
                "gender": null,
                "name": "paramName",
                "number": null,
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "C2",
              "__stringVariationArgs": Array [],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
          ],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtTextNode {
          "__nodeCode": "B2",
          "__stringVariationArgs": Array [],
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
      ],
      "moduleName": "fbt",
      "node": "BabelNode[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'A2'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "__subjectCode": "subjectValue",
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": "BabelNode[type=Identifier]",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'id1'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'id1'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'id1'",
        "range": Object {
          "id1": "groups",
          "id2": "photos",
          "id3": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "are ",
        "name": "number",
        "showCount": null,
        "value": null,
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "__valueCode": "personname",
        "gender": "BabelNode[type=Identifier]",
        "name": "name",
        "value": "BabelNode[type=Identifier]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": null,
        "type": "object",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "personName",
        "number": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "catCount",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "dogCount",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "catCount",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "catCount",
        "count": "BabelNode[type=Identifier]",
        "many": null,
        "name": "cat_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "dogCount",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "dogCount",
        "count": "BabelNode[type=Identifier]",
        "many": null,
        "name": "dog_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "were ",
        "name": "number",
        "showCount": "no",
        "value": null,
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": null,
        "type": "possessive",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": true,
        "gender": "BabelNode[type=Identifier]",
        "human": true,
        "type": "subject",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": true,
        "type": "reflexive",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "node": null,
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "node": null,
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "count",
        "number": true,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "node": null,
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "node": null,
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "count",
        "number": true,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
                bar
              </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
                bar
              </a> : qux)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name2",
        "number": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name2",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should accept well-formed options" 1`] = `
Array [
  Object {
    "author": "jwatson",
    "col_beg": 2,
    "col_end": 8,
    "desc": "options!",
    "filepath": undefined,
    "jsfbt": "A string that moved files",
    "line_beg": 2,
    "line_end": 5,
    "project": "Super Secret",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should allow description concatenation" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "With a ridiculously long description that requires concatenation",
    "filepath": undefined,
    "jsfbt": "A short string",
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should be able to nest within React nodes" 1`] = `
Array [
  Object {
    "col_beg": 20,
    "col_end": 53,
    "desc": "nested!",
    "filepath": undefined,
    "jsfbt": "A nested string",
    "line_beg": 3,
    "line_end": 3,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should convert simple strings" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 47,
    "desc": "It's simple",
    "filepath": undefined,
    "jsfbt": "A simple string",
    "line_beg": 2,
    "line_end": 2,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 13,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 17,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should get project from docblock" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 50,
    "desc": "It's simple",
    "filepath": undefined,
    "jsfbt": "Also simple string",
    "line_beg": 2,
    "line_end": 2,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle duplicate enums" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 17,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle enums (with array values)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enum as an array",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Click to see groups",
        "photos": "Click to see photos",
        "videos": "Click to see videos",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle enums (with value map)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enum as an object",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "id1",
            "id2",
            "id3",
          ],
        },
      ],
      "t": Object {
        "id1": "Click to see groups",
        "id2": "Click to see photos",
        "id3": "Click to see videos",
      },
    },
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle enums with more text after" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "range": Array [
            "groups",
            "photos",
            "videos",
          ],
        },
      ],
      "t": Object {
        "groups": "Hello, groups!",
        "photos": "Hello, photos!",
        "videos": "Hello, videos!",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 2,
        },
        Object {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "There are {number} likes",
        },
        "_1": Object {
          "_1": "There is a like",
        },
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle names" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "names",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "name",
          "type": 1,
        },
      ],
      "t": Object {
        "*": "You just friended {name}",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle object pronoun" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "object pronoun",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 3,
        },
      ],
      "t": Object {
        "*": "I know them.",
        "0": "I know this.",
        "1": "I know her.",
        "2": "I know him.",
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle params" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "Moar params",
    "filepath": undefined,
    "jsfbt": "A parameterized message to {personName}",
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle plurals that have different count variables" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
        Object {
          "singular": true,
          "token": "dog_token",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "{cat_token} cats and {dog_token} dogs",
          "_1": "{cat_token} cats and 1 dog",
        },
        "_1": Object {
          "*": "1 cat and {dog_token} dogs",
          "_1": "1 cat and 1 dog",
        },
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle plurals that share the same count variable" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 2,
        },
        Object {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "There were {number} likes",
        },
        "_1": Object {
          "_1": "There was a like",
        },
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle possessive pronoun" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "possessive pronoun",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 3,
        },
      ],
      "t": Object {
        "*": "It is their birthday.",
        "1": "It is her birthday.",
        "2": "It is his birthday.",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle subject and reflexive pronouns" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "subject+reflexive pronouns",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "type": 3,
        },
        Object {
          "type": 3,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "They wished themselves a happy birthday.",
        },
        "1": Object {
          "1": "She wished herself a happy birthday.",
        },
        "2": Object {
          "2": "He wished himself a happy birthday.",
        },
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle variations + same param" 1`] = `
Array [
  Object {
    "col_beg": 6,
    "col_end": 7,
    "desc": "test variations + sameParam",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "count",
          "type": 2,
        },
      ],
      "t": Object {
        "*": "You have {count} likes. Comment on it to get more than {count} likes",
      },
    },
    "line_beg": 3,
    "line_end": 10,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handle variations" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "variations!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "count",
          "type": 2,
        },
      ],
      "t": Object {
        "*": "Click to see {count} links",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should handler wrapping parens" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 52,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 2,
    "line_end": 2,
    "project": "",
    "type": "text",
  },
  Object {
    "col_beg": 14,
    "col_end": 58,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 3,
    "line_end": 3,
    "project": "",
    "type": "text",
  },
  Object {
    "col_beg": 14,
    "col_end": 58,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 4,
    "line_end": 4,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "d",
    "filepath": undefined,
    "jsfbt": "{name1} and {name1}",
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should maintain intra-argument newlines" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "a",
    "filepath": undefined,
    "jsfbt": "{name1} blah {name2}",
    "line_beg": 2,
    "line_end": 16,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should maintain newlines when using string templates" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "blah",
    "filepath": undefined,
    "jsfbt": "A simple string... with some other stuff.",
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should maintain newlines within arguments" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "a",
    "filepath": undefined,
    "jsfbt": "a b {name1} c d {name2} e",
    "line_beg": 2,
    "line_end": 12,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data (react native) for scenario "should maintain newlines" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "blah",
    "filepath": undefined,
    "jsfbt": "A simple string... with some other stuff.",
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should accept well-formed options" 1`] = `
Array [
  Object {
    "author": "jwatson",
    "col_beg": 2,
    "col_end": 8,
    "desc": "options!",
    "filepath": undefined,
    "jsfbt": "A string that moved files",
    "line_beg": 2,
    "line_end": 5,
    "project": "Super Secret",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should allow description concatenation" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "With a ridiculously long description that requires concatenation",
    "filepath": undefined,
    "jsfbt": "A short string",
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should be able to nest within React nodes" 1`] = `
Array [
  Object {
    "col_beg": 20,
    "col_end": 53,
    "desc": "nested!",
    "filepath": undefined,
    "jsfbt": "A nested string",
    "line_beg": 3,
    "line_end": 3,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should convert simple strings" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 47,
    "desc": "It's simple",
    "filepath": undefined,
    "jsfbt": "A simple string",
    "line_beg": 2,
    "line_end": 2,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 13,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 17,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should get project from docblock" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 50,
    "desc": "It's simple",
    "filepath": undefined,
    "jsfbt": "Also simple string",
    "line_beg": 2,
    "line_end": 2,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle duplicate enums" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Look! Groups and groups!",
        "photos": "Look! Photos and photos!",
        "videos": "Look! Videos and videos!",
      },
    },
    "line_beg": 2,
    "line_end": 17,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with array values)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enum as an array",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Click to see groups",
        "photos": "Click to see photos",
        "videos": "Click to see videos",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with value map)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enum as an object",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "id1": "Click to see groups",
        "id2": "Click to see photos",
        "id3": "Click to see videos",
      },
    },
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle enums with more text after" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "enums!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "groups": "Hello, groups!",
        "photos": "Hello, photos!",
        "videos": "Hello, videos!",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
        Object {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "There are {number} likes",
        },
        "_1": Object {
          "_1": "There is a like",
        },
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle names" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "names",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "name",
          "type": 1,
        },
      ],
      "t": Object {
        "*": "You just friended {name}",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle object pronoun" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "object pronoun",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "*": "I know them.",
        "0": "I know this.",
        "1": "I know her.",
        "2": "I know him.",
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle params" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "Moar params",
    "filepath": undefined,
    "jsfbt": "A parameterized message to {personName}",
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle plurals that have different count variables" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
        Object {
          "singular": true,
          "token": "dog_token",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "{cat_token} cats and {dog_token} dogs",
          "_1": "{cat_token} cats and 1 dog",
        },
        "_1": Object {
          "*": "1 cat and {dog_token} dogs",
          "_1": "1 cat and 1 dog",
        },
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle plurals that share the same count variable" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "plurals",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
        Object {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": Object {
        "*": Object {
          "*": "There were {number} likes",
        },
        "_1": Object {
          "_1": "There was a like",
        },
      },
    },
    "line_beg": 2,
    "line_end": 7,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle possessive pronoun" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "possessive pronoun",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
      ],
      "t": Object {
        "*": "It is their birthday.",
        "1": "It is her birthday.",
        "2": "It is his birthday.",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle subject and reflexive pronouns" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 9,
    "desc": "subject+reflexive pronouns",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        null,
        null,
      ],
      "t": Object {
        "*": Object {
          "*": "They wished themselves a happy birthday.",
        },
        "1": Object {
          "1": "She wished herself a happy birthday.",
        },
        "2": Object {
          "2": "He wished himself a happy birthday.",
        },
      },
    },
    "line_beg": 2,
    "line_end": 8,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle variations + same param" 1`] = `
Array [
  Object {
    "col_beg": 6,
    "col_end": 7,
    "desc": "test variations + sameParam",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "count",
          "type": 2,
        },
      ],
      "t": Object {
        "*": "You have {count} likes. Comment on it to get more than {count} likes",
      },
    },
    "line_beg": 3,
    "line_end": 10,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle variations" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "variations!",
    "filepath": undefined,
    "jsfbt": Object {
      "m": Array [
        Object {
          "token": "count",
          "type": 2,
        },
      ],
      "t": Object {
        "*": "Click to see {count} links",
      },
    },
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "table",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handler wrapping parens" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 52,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 2,
    "line_end": 2,
    "project": "",
    "type": "text",
  },
  Object {
    "col_beg": 14,
    "col_end": 58,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 3,
    "line_end": 3,
    "project": "",
    "type": "text",
  },
  Object {
    "col_beg": 14,
    "col_end": 58,
    "desc": "desc",
    "filepath": undefined,
    "jsfbt": "foobarbazqux",
    "line_beg": 4,
    "line_end": 4,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "d",
    "filepath": undefined,
    "jsfbt": "{name1} and {name1}",
    "line_beg": 2,
    "line_end": 5,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should maintain intra-argument newlines" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "a",
    "filepath": undefined,
    "jsfbt": "{name1} blah {name2}",
    "line_beg": 2,
    "line_end": 16,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines when using string templates" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "blah",
    "filepath": undefined,
    "jsfbt": "A simple string... with some other stuff.",
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines within arguments" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "a",
    "filepath": undefined,
    "jsfbt": "a b {name1} c d {name2} e",
    "line_beg": 2,
    "line_end": 12,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines" 1`] = `
Array [
  Object {
    "col_beg": 10,
    "col_end": 7,
    "desc": "blah",
    "filepath": undefined,
    "jsfbt": "A simple string... with some other stuff.",
    "line_beg": 2,
    "line_end": 6,
    "project": "",
    "type": "text",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": "jwatson",
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "Super Secret",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should allow description concatenation" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A short string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"Look!  \\", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), \\"  and  \\", fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
}), \\"!\\"], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"Look!  \\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"  and  \\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"!\\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'id1'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'id1'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'id1'",
        "range": Object {
          "id1": "groups",
          "id2": "photos",
          "id3": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "are ",
        "name": "number",
        "showCount": null,
        "value": null,
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "__valueCode": "personname",
        "gender": "BabelNode[type=Identifier]",
        "name": "name",
        "value": "BabelNode[type=Identifier]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": null,
        "type": "object",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "personName",
        "number": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "catCount",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "dogCount",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "catCount",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "catCount",
        "count": "BabelNode[type=Identifier]",
        "many": null,
        "name": "cat_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "dogCount",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "dogCount",
        "count": "BabelNode[type=Identifier]",
        "many": null,
        "name": "dog_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "were ",
        "name": "number",
        "showCount": "no",
        "value": null,
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": null,
        "type": "possessive",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": true,
        "gender": "BabelNode[type=Identifier]",
        "human": true,
        "type": "subject",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": true,
        "type": "reflexive",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "node": null,
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "node": null,
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "count",
        "number": true,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "node": null,
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "node": null,
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "count",
        "number": true,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
              bar
            </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
              bar
            </a> : qux)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name2",
        "number": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name2",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string... ', 'with some other stuff.'], 'blah')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string... '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'with some other stuff.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": "jwatson",
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "Super Secret",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should allow description concatenation" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A short string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"Look!  \\", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), \\"  and  \\", fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
}), \\"!\\"], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"Look!  \\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"  and  \\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"!\\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'id1'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'id1'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'id1'",
        "range": Object {
          "id1": "groups",
          "id2": "photos",
          "id3": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": Array [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "node": "BabelNode[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": Array [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "node": "BabelNode[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__valueCode": "'groups'",
        "range": Object {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "BabelNode[type=StringLiteral]",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "are ",
        "name": "number",
        "showCount": null,
        "value": null,
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "__valueCode": "personname",
        "gender": "BabelNode[type=Identifier]",
        "name": "name",
        "value": "BabelNode[type=Identifier]",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": null,
        "type": "object",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "personName",
        "number": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "catCount",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "dogCount",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "catCount",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "catCount",
        "count": "BabelNode[type=Identifier]",
        "many": null,
        "name": "cat_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "dogCount",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "dogCount",
        "count": "BabelNode[type=Identifier]",
        "many": null,
        "name": "dog_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "were ",
        "name": "number",
        "showCount": "no",
        "value": null,
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__countCode": "count",
        "count": "BabelNode[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": null,
        "type": "possessive",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": Array [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "node": "BabelNode[type=Identifier]",
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": true,
        "gender": "BabelNode[type=Identifier]",
        "human": true,
        "type": "subject",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": Array [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "node": "BabelNode[type=Identifier]",
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "BabelNode[type=Identifier]",
        "human": true,
        "type": "reflexive",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "node": null,
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "node": null,
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "count",
        "number": true,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": Array [
    NumberStringVariationArg {
      "node": null,
      "value": undefined,
    },
  ],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": Array [
        NumberStringVariationArg {
          "node": null,
          "value": undefined,
        },
      ],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "count",
        "number": true,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
              bar
            </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
              bar
            </a> : qux)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name2",
        "number": null,
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name1",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": Object {
        "gender": null,
        "name": "name2",
        "number": null,
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string... ', 'with some other stuff.'], 'blah')",
  "__stringVariationArgs": Array [],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string... '",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'with some other stuff.'",
      "__stringVariationArgs": Array [],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": Object {
    "author": null,
    "common": false,
    "doNotExtract": false,
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
}
`;
