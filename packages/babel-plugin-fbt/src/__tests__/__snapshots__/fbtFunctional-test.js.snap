// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle a JSX fragment nested with fbt.param as an argument" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A1', <a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, 'A2'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A1'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>",
      "_variationFactorValues": Array [],
      "children": Array [
        FbtTextNode {
          "__nodeCode": "B1",
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtImplicitParamNode {
          "__nodeCode": "<b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>",
          "_variationFactorValues": Array [],
          "children": Array [
            FbtTextNode {
              "__nodeCode": "C1",
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "",
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtParamNode {
              "__nodeCode": "fbt.param('paramName', paramValue)",
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "C2",
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
          ],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtTextNode {
          "__nodeCode": "B2",
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
      ],
      "moduleName": "fbt",
      "node": "BabelNode[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'A2'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
                bar
              </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
                bar
              </a> : qux)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle a JSX fragment nested with fbt.param as an argument" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A1', <a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, 'A2'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A1'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>",
      "_variationFactorValues": Array [],
      "children": Array [
        FbtTextNode {
          "__nodeCode": "B1",
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtImplicitParamNode {
          "__nodeCode": "<b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>",
          "_variationFactorValues": Array [],
          "children": Array [
            FbtTextNode {
              "__nodeCode": "C1",
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "",
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtParamNode {
              "__nodeCode": "fbt.param('paramName', paramValue)",
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "C2",
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
          ],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtTextNode {
          "__nodeCode": "B2",
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
      ],
      "moduleName": "fbt",
      "node": "BabelNode[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'A2'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
                bar
              </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
                bar
              </a> : qux)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should allow description concatenation" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A short string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"Look!  \\", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), \\"  and  \\", fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
}), \\"!\\"], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"Look!  \\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"  and  \\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"!\\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
              bar
            </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
              bar
            </a> : qux)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string... ', 'with some other stuff.'], 'blah')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string... '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'with some other stuff.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should allow description concatenation" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A short string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"Look!  \\", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), \\"  and  \\", fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
}), \\"!\\"], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"Look!  \\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"  and  \\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"!\\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
              bar
            </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
              bar
            </a> : qux)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string... ', 'with some other stuff.'], 'blah')",
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string... '",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'with some other stuff.'",
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;
