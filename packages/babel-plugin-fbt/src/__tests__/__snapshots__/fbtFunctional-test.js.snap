// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": [Error: Line 2 Column 3: This method must be implemented in a child class
---
fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": [Error: Line 2 Column 8: This method must be implemented in a child class
---
'A string that moved files'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt(['A nested string'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [Error: Line 3 Column 26: This method must be implemented in a child class
---
'A nested string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt(['A nested string'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [Error: Line 3 Column 26: This method must be implemented in a child class
---
'A nested string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A simple string'], "It's simple")
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'A simple string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Look! '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [Error: Line 11 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 16 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Also simple string'], "It's simple")
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": [Error: Line 2 Column 16: This method must be implemented in a child class
---
'Also simple string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle a JSX fragment nested with fbt.param as an argument" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A1', <a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, 'A2'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 15: This method must be implemented in a child class
---
fbt(['A1', <a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, 'A2'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A1'",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
'A1'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
<a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>
---],
      "_variationFactorValues": Array [],
      "children": Array [
        FbtTextNode {
          "__nodeCode": "B1",
          "__stringVariationArgs": [Error: Line 6 Column 14: This method must be implemented in a child class
---
B1
---],
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtImplicitParamNode {
          "__nodeCode": "<b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>",
          "__stringVariationArgs": [Error: Line 8 Column 13: This method must be implemented in a child class
---
<b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
---],
          "_variationFactorValues": Array [],
          "children": Array [
            FbtTextNode {
              "__nodeCode": "C1",
              "__stringVariationArgs": [Error: Line 8 Column 16: This method must be implemented in a child class
---
C1
---],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [Error: Line 13 Column 16: This method must be implemented in a child class
---

---],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtParamNode {
              "__nodeCode": "fbt.param('paramName', paramValue)",
              "__stringVariationArgs": [Error: Line 14 Column 16: This method must be implemented in a child class
---
fbt.param('paramName', paramValue)
---],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "C2",
              "__stringVariationArgs": [Error: Line 14 Column 51: This method must be implemented in a child class
---
C2
---],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
          ],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtTextNode {
          "__nodeCode": "B2",
          "__stringVariationArgs": [Error: Line 16 Column 17: This method must be implemented in a child class
---
B2
---],
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
      ],
      "moduleName": "fbt",
      "node": "BabelNode[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'A2'",
      "__stringVariationArgs": [Error: Line 19 Column 11: This method must be implemented in a child class
---
'A2'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Look! '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [Error: Line 11 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 16 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', ['groups', 'photos', 'videos'])
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Hello, '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', ['groups', 'photos', 'videos'])
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'There '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.plural('is ', count, {
  many: 'are '
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'You just friended '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.name('name', personname, gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
'I know '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
fbt.pronoun('object', gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": [Error: Line 6 Column 13: This method must be implemented in a child class
---
'.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'A parameterized message to '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.param('personName', truthy ? ifTrue : ifFalse)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'There '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
'It is '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
fbt.pronoun('possessive', gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": [Error: Line 6 Column 13: This method must be implemented in a child class
---
' birthday.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
' wished '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": [Error: Line 6 Column 13: This method must be implemented in a child class
---
fbt.pronoun('reflexive', gender, {
  human: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": [Error: Line 7 Column 13: This method must be implemented in a child class
---
' a happy birthday.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": [Error: Line 3 Column 7: This method must be implemented in a child class
---
fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
'You have '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.param('count', val, {
  number: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": [Error: Line 7 Column 11: This method must be implemented in a child class
---
' likes. Comment on it to get more than '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": [Error: Line 8 Column 11: This method must be implemented in a child class
---
fbt.sameParam('count')
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": [Error: Line 9 Column 11: This method must be implemented in a child class
---
' likes'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.param('count', c, {
  number: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
' links'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 4 Column 19: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 5 Column 19: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 8 Column 15: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 11 Column 12: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 11 Column 20: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 11 Column 28: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 14 Column 15: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 16 Column 11: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 17 Column 11: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 17 Column 20: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 17 Column 28: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.param('name1', val1)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.sameParam('name1')
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
                bar
              </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.param('name1', foo ? <a>
                bar
              </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
                bar
              </a> : qux)",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.param('name1', foo ? <a>
                bar
              </a> : qux)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": [Error: Line 14 Column 11: This method must be implemented in a child class
---
' blah '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": [Error: Line 15 Column 11: This method must be implemented in a child class
---
fbt.param('name2', qux)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(["A simple string...\\nwith some other stuff."], 'blah')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"A simple string...\\nwith some other stuff."
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'a'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
' b '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.param('name1', val1)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": [Error: Line 7 Column 11: This method must be implemented in a child class
---
' c '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": [Error: Line 9 Column 11: This method must be implemented in a child class
---
// comments
' d '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
fbt.param('name2', val2)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": [Error: Line 11 Column 11: This method must be implemented in a child class
---
' e '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": [Error: Line 2 Column 3: This method must be implemented in a child class
---
fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": [Error: Line 2 Column 8: This method must be implemented in a child class
---
'A string that moved files'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt(['A nested string'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [Error: Line 3 Column 26: This method must be implemented in a child class
---
'A nested string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt(['A nested string'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [Error: Line 3 Column 26: This method must be implemented in a child class
---
'A nested string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A simple string'], "It's simple")
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'A simple string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Look! '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [Error: Line 11 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 16 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Also simple string'], "It's simple")
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": [Error: Line 2 Column 16: This method must be implemented in a child class
---
'Also simple string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle a JSX fragment nested with fbt.param as an argument" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A1', <a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, 'A2'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 15: This method must be implemented in a child class
---
fbt(['A1', <a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, 'A2'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A1'",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
'A1'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
<a>
            B1
            <b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>
---],
      "_variationFactorValues": Array [],
      "children": Array [
        FbtTextNode {
          "__nodeCode": "B1",
          "__stringVariationArgs": [Error: Line 6 Column 14: This method must be implemented in a child class
---
B1
---],
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtImplicitParamNode {
          "__nodeCode": "<b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>",
          "__stringVariationArgs": [Error: Line 8 Column 13: This method must be implemented in a child class
---
<b>
              C1
              {// TODO(T27672828) fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
---],
          "_variationFactorValues": Array [],
          "children": Array [
            FbtTextNode {
              "__nodeCode": "C1",
              "__stringVariationArgs": [Error: Line 8 Column 16: This method must be implemented in a child class
---
C1
---],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [Error: Line 13 Column 16: This method must be implemented in a child class
---

---],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtParamNode {
              "__nodeCode": "fbt.param('paramName', paramValue)",
              "__stringVariationArgs": [Error: Line 14 Column 16: This method must be implemented in a child class
---
fbt.param('paramName', paramValue)
---],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
            FbtTextNode {
              "__nodeCode": "C2",
              "__stringVariationArgs": [Error: Line 14 Column 51: This method must be implemented in a child class
---
C2
---],
              "_variationFactorValues": Array [],
              "children": Array [],
              "moduleName": "fbt",
              "node": "BabelNode[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "parent": [Circular],
            },
          ],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
        FbtTextNode {
          "__nodeCode": "B2",
          "__stringVariationArgs": [Error: Line 16 Column 17: This method must be implemented in a child class
---
B2
---],
          "_variationFactorValues": Array [],
          "children": Array [],
          "moduleName": "fbt",
          "node": "BabelNode[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "parent": [Circular],
        },
      ],
      "moduleName": "fbt",
      "node": "BabelNode[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'A2'",
      "__stringVariationArgs": [Error: Line 19 Column 11: This method must be implemented in a child class
---
'A2'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Look! '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [Error: Line 11 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 16 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', ['groups', 'photos', 'videos'])
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Hello, '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', ['groups', 'photos', 'videos'])
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'There '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.plural('is ', count, {
  many: 'are '
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'You just friended '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.name('name', personname, gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
'I know '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
fbt.pronoun('object', gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": [Error: Line 6 Column 13: This method must be implemented in a child class
---
'.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'A parameterized message to '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.param('personName', truthy ? ifTrue : ifFalse)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'There '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
'It is '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
fbt.pronoun('possessive', gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": [Error: Line 6 Column 13: This method must be implemented in a child class
---
' birthday.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
' wished '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": [Error: Line 6 Column 13: This method must be implemented in a child class
---
fbt.pronoun('reflexive', gender, {
  human: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": [Error: Line 7 Column 13: This method must be implemented in a child class
---
' a happy birthday.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": [Error: Line 3 Column 7: This method must be implemented in a child class
---
fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
'You have '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.param('count', val, {
  number: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": [Error: Line 7 Column 11: This method must be implemented in a child class
---
' likes. Comment on it to get more than '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": [Error: Line 8 Column 11: This method must be implemented in a child class
---
fbt.sameParam('count')
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": [Error: Line 9 Column 11: This method must be implemented in a child class
---
' likes'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.param('count', c, {
  number: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
' links'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 4 Column 19: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 5 Column 19: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 8 Column 15: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 11 Column 12: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 11 Column 20: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 11 Column 28: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 14 Column 15: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 16 Column 11: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 17 Column 11: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 17 Column 20: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 17 Column 28: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.param('name1', val1)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.sameParam('name1')
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
                bar
              </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.param('name1', foo ? <a>
                bar
              </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
                bar
              </a> : qux)",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.param('name1', foo ? <a>
                bar
              </a> : qux)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": [Error: Line 14 Column 11: This method must be implemented in a child class
---
' blah '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": [Error: Line 15 Column 11: This method must be implemented in a child class
---
fbt.param('name2', qux)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(["A simple string...\\nwith some other stuff."], 'blah')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"A simple string...\\nwith some other stuff."
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
'a'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
' b '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [Error: Line 6 Column 11: This method must be implemented in a child class
---
fbt.param('name1', val1)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": [Error: Line 7 Column 11: This method must be implemented in a child class
---
' c '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": [Error: Line 9 Column 11: This method must be implemented in a child class
---
// comments
' d '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
fbt.param('name2', val2)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": [Error: Line 11 Column 11: This method must be implemented in a child class
---
' e '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": [Error: Line 2 Column 3: This method must be implemented in a child class
---
fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": [Error: Line 2 Column 7: This method must be implemented in a child class
---
'A string that moved files'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should allow description concatenation" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A short string'",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'A short string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt(['A nested string'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [Error: Line 3 Column 25: This method must be implemented in a child class
---
'A nested string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt(['A nested string'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [Error: Line 3 Column 25: This method must be implemented in a child class
---
'A nested string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A simple string'], "It's simple")
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": [Error: Line 2 Column 15: This method must be implemented in a child class
---
'A simple string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"Look!  \\", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), \\"  and  \\", fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
}), \\"!\\"], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(["Look!  ", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), "  and  ", fbt.enum('groups', {
  "groups": 'groups',
  "photos": 'photos',
  "videos": 'videos'
}), "!"], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"Look!  \\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"Look!  "
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 3 Column 19: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"  and  \\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"  and  "
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
})",
      "__stringVariationArgs": [Error: Line 7 Column 21: This method must be implemented in a child class
---
fbt.enum('groups', {
  "groups": 'groups',
  "photos": 'photos',
  "videos": 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"!\\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"!"
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Look! '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 9 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 15 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Also simple string'], "It's simple")
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": [Error: Line 2 Column 15: This method must be implemented in a child class
---
'Also simple string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Look! '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 9 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 15 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [Error: Line 3 Column 27: This method must be implemented in a child class
---
fbt.enum('groups', ['groups', 'photos', 'videos'])
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Hello, '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt.enum('groups', ['groups', 'photos', 'videos'])
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 3 Column 74: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'There '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
fbt.plural('is ', count, {
  many: 'are '
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [Error: Line 5 Column 9: This method must be implemented in a child class
---
fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'You just friended '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": [Error: Line 3 Column 32: This method must be implemented in a child class
---
fbt.name('name', personname, gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": [Error: Line 3 Column 11: This method must be implemented in a child class
---
'I know '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
fbt.pronoun('object', gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
'.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'A parameterized message to '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.param('personName', truthy ? ifTrue : ifFalse)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [Error: Line 5 Column 9: This method must be implemented in a child class
---
fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'There '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": [Error: Line 3 Column 11: This method must be implemented in a child class
---
'It is '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": [Error: Line 3 Column 22: This method must be implemented in a child class
---
fbt.pronoun('possessive', gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": [Error: Line 3 Column 58: This method must be implemented in a child class
---
' birthday.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": [Error: Line 3 Column 11: This method must be implemented in a child class
---
fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
' wished '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
fbt.pronoun('reflexive', gender, {
  human: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": [Error: Line 6 Column 13: This method must be implemented in a child class
---
' a happy birthday.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": [Error: Line 3 Column 7: This method must be implemented in a child class
---
fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
'You have '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": [Error: Line 5 Column 9: This method must be implemented in a child class
---
fbt.param('count', val, {
  number: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": [Error: Line 6 Column 9: This method must be implemented in a child class
---
' likes. Comment on it to get more than '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": [Error: Line 7 Column 9: This method must be implemented in a child class
---
fbt.sameParam('count')
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": [Error: Line 8 Column 9: This method must be implemented in a child class
---
' likes'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": [Error: Line 3 Column 27: This method must be implemented in a child class
---
fbt.param('count', c, {
  number: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": [Error: Line 3 Column 67: This method must be implemented in a child class
---
' links'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 2 Column 15: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 2 Column 23: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 2 Column 31: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 2 Column 39: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 3 Column 15: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 3 Column 19: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 3 Column 28: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 3 Column 36: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 3 Column 44: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 4 Column 15: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 4 Column 19: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 4 Column 27: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 4 Column 36: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 4 Column 44: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
fbt.param('name1', val1)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 3 Column 36: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": [Error: Line 3 Column 46: This method must be implemented in a child class
---
fbt.sameParam('name1')
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
              bar
            </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.param('name1', foo ? <a>
              bar
            </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
              bar
            </a> : qux)",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
fbt.param('name1', foo ? <a>
              bar
            </a> : qux)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": [Error: Line 13 Column 11: This method must be implemented in a child class
---
' blah '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": [Error: Line 14 Column 11: This method must be implemented in a child class
---
fbt.param('name2', qux)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(["A simple string...\\nwith some other stuff."], 'blah')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"A simple string...\\nwith some other stuff."
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'a'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
' b '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [Error: Line 5 Column 9: This method must be implemented in a child class
---
fbt.param('name1', val1)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": [Error: Line 6 Column 9: This method must be implemented in a child class
---
' c '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": [Error: Line 8 Column 9: This method must be implemented in a child class
---
// comments
' d '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": [Error: Line 9 Column 9: This method must be implemented in a child class
---
fbt.param('name2', val2)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": [Error: Line 10 Column 9: This method must be implemented in a child class
---
' e '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects (react native) for scenario "should maintain newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string... ', 'with some other stuff.'], 'blah')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A simple string... ', 'with some other stuff.'], 'blah')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string... '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'A simple string... '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'with some other stuff.'",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
'with some other stuff.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": [Error: Line 2 Column 3: This method must be implemented in a child class
---
fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": [Error: Line 2 Column 7: This method must be implemented in a child class
---
'A string that moved files'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should allow description concatenation" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A short string'",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'A short string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt(['A nested string'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [Error: Line 3 Column 25: This method must be implemented in a child class
---
'A nested string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt(['A nested string'], 'nested!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [Error: Line 3 Column 25: This method must be implemented in a child class
---
'A nested string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], \\"It's simple\\")",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A simple string'], "It's simple")
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": [Error: Line 2 Column 15: This method must be implemented in a child class
---
'A simple string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"Look!  \\", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), \\"  and  \\", fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
}), \\"!\\"], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(["Look!  ", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), "  and  ", fbt.enum('groups', {
  "groups": 'groups',
  "photos": 'photos',
  "videos": 'videos'
}), "!"], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"Look!  \\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"Look!  "
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 3 Column 19: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"  and  \\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"  and  "
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  \\"groups\\": 'groups',
  \\"photos\\": 'photos',
  \\"videos\\": 'videos'
})",
      "__stringVariationArgs": [Error: Line 7 Column 21: This method must be implemented in a child class
---
fbt.enum('groups', {
  "groups": 'groups',
  "photos": 'photos',
  "videos": 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "\\"!\\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"!"
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Look! '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 9 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 15 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], \\"It's simple\\")",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Also simple string'], "It's simple")
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": [Error: Line 2 Column 15: This method must be implemented in a child class
---
'Also simple string'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Look! '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 9 Column 11: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [Error: Line 10 Column 11: This method must be implemented in a child class
---
fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 15 Column 11: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [Error: Line 3 Column 27: This method must be implemented in a child class
---
fbt.enum('groups', ['groups', 'photos', 'videos'])
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Hello, '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [Error: Line 3 Column 21: This method must be implemented in a child class
---
fbt.enum('groups', ['groups', 'photos', 'videos'])
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [Error: Line 3 Column 74: This method must be implemented in a child class
---
'!'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'There '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
fbt.plural('is ', count, {
  many: 'are '
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [Error: Line 5 Column 9: This method must be implemented in a child class
---
fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'You just friended '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": [Error: Line 3 Column 32: This method must be implemented in a child class
---
fbt.name('name', personname, gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": [Error: Line 3 Column 11: This method must be implemented in a child class
---
'I know '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
fbt.pronoun('object', gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
'.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'A parameterized message to '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.param('personName', truthy ? ifTrue : ifFalse)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [Error: Line 5 Column 9: This method must be implemented in a child class
---
fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'There '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": [Error: Line 4 Column 11: This method must be implemented in a child class
---
fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [Error: Line 5 Column 11: This method must be implemented in a child class
---
fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": [Error: Line 3 Column 11: This method must be implemented in a child class
---
'It is '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": [Error: Line 3 Column 22: This method must be implemented in a child class
---
fbt.pronoun('possessive', gender)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": [Error: Line 3 Column 58: This method must be implemented in a child class
---
' birthday.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": [Error: Line 3 Column 11: This method must be implemented in a child class
---
fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": [Error: Line 4 Column 13: This method must be implemented in a child class
---
' wished '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": [Error: Line 5 Column 13: This method must be implemented in a child class
---
fbt.pronoun('reflexive', gender, {
  human: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": [Error: Line 6 Column 13: This method must be implemented in a child class
---
' a happy birthday.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": [Error: Line 3 Column 7: This method must be implemented in a child class
---
fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
'You have '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": [Error: Line 5 Column 9: This method must be implemented in a child class
---
fbt.param('count', val, {
  number: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": [Error: Line 6 Column 9: This method must be implemented in a child class
---
' likes. Comment on it to get more than '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": [Error: Line 7 Column 9: This method must be implemented in a child class
---
fbt.sameParam('count')
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": [Error: Line 8 Column 9: This method must be implemented in a child class
---
' likes'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'Click to see '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": [Error: Line 3 Column 27: This method must be implemented in a child class
---
fbt.param('count', c, {
  number: true
})
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": [Error: Line 3 Column 67: This method must be implemented in a child class
---
' links'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 2 Column 15: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 2 Column 23: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 2 Column 31: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 2 Column 39: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 3 Column 15: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 3 Column 19: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 3 Column 28: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 3 Column 36: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 3 Column 44: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [Error: Line 4 Column 15: This method must be implemented in a child class
---
fbt(['foo', 'bar', 'baz', 'qux'], 'desc')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [Error: Line 4 Column 19: This method must be implemented in a child class
---
'foo'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [Error: Line 4 Column 27: This method must be implemented in a child class
---
'bar'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [Error: Line 4 Column 36: This method must be implemented in a child class
---
'baz'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [Error: Line 4 Column 44: This method must be implemented in a child class
---
'qux'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
fbt.param('name1', val1)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [Error: Line 3 Column 36: This method must be implemented in a child class
---
' and '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": [Error: Line 3 Column 46: This method must be implemented in a child class
---
fbt.sameParam('name1')
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? <a>
              bar
            </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt([fbt.param('name1', foo ? <a>
              bar
            </a> : qux), ' blah ', fbt.param('name2', qux)], 'a')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? <a>
              bar
            </a> : qux)",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
fbt.param('name1', foo ? <a>
              bar
            </a> : qux)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": [Error: Line 13 Column 11: This method must be implemented in a child class
---
' blah '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": [Error: Line 14 Column 11: This method must be implemented in a child class
---
fbt.param('name2', qux)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([\\"A simple string...\\\\nwith some other stuff.\\"], 'blah')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(["A simple string...\\nwith some other stuff."], 'blah')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "\\"A simple string...\\\\nwith some other stuff.\\"",
      "__stringVariationArgs": [Error: This method must be implemented in a child class
---
"A simple string...\\nwith some other stuff."
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['a', ' b ', fbt.param('name1', val1), ' c ', // comments
' d ', fbt.param('name2', val2), ' e '], 'a')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'a'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
' b '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [Error: Line 5 Column 9: This method must be implemented in a child class
---
fbt.param('name1', val1)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": [Error: Line 6 Column 9: This method must be implemented in a child class
---
' c '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": [Error: Line 8 Column 9: This method must be implemented in a child class
---
// comments
' d '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": [Error: Line 9 Column 9: This method must be implemented in a child class
---
fbt.param('name2', val2)
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": [Error: Line 10 Column 9: This method must be implemented in a child class
---
' e '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string... ', 'with some other stuff.'], 'blah')",
  "__stringVariationArgs": [Error: Line 2 Column 11: This method must be implemented in a child class
---
fbt(['A simple string... ', 'with some other stuff.'], 'blah')
---],
  "_variationFactorValues": Array [],
  "children": Array [
    FbtTextNode {
      "__nodeCode": "'A simple string... '",
      "__stringVariationArgs": [Error: Line 3 Column 9: This method must be implemented in a child class
---
'A simple string... '
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
    FbtTextNode {
      "__nodeCode": "'with some other stuff.'",
      "__stringVariationArgs": [Error: Line 4 Column 9: This method must be implemented in a child class
---
'with some other stuff.'
---],
      "_variationFactorValues": Array [],
      "children": Array [],
      "moduleName": "fbt",
      "node": "BabelNode[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "parent": [Circular],
    },
  ],
  "moduleName": "fbt",
  "node": "BabelNode[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
}
`;
