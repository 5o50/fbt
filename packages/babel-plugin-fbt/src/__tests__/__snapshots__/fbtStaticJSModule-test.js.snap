// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fbt preserveWhitespace argument should NOT preserve whitespaces that do not neighbor raw text jsx elements and raw text 1`] = `
const fbt = require("fbt");

var x = fbt._(
  /* __FBT__ start */ {
    jsfbt: {
      t: {
        desc: "d",
        text: "{=Where do}{=spaces}{=go?} Good {=question} !",
        tokenAliases: {
          "=Where do": "=m0",
          "=spaces": "=m1",
          "=go?": "=m2",
          "=question": "=m4",
        },
      },
      m: [],
    },
    project: "",
  } /* __FBT__ end */,
  [
    fbt._implicitParam(
      "=m0",
      /*#__PURE__*/ React.createElement(
        "span",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=Where do}{=spaces}{=go?} Good {=question} !"',
                text: "Where do",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
    fbt._implicitParam(
      "=m1",
      /*#__PURE__*/ React.createElement(
        "b",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=Where do}{=spaces}{=go?} Good {=question} !"',
                text: "spaces",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
    fbt._implicitParam(
      "=m2",
      /*#__PURE__*/ React.createElement(
        "i",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=Where do}{=spaces}{=go?} Good {=question} !"',
                text: "go?",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
    fbt._implicitParam(
      "=m4",
      /*#__PURE__*/ React.createElement(
        "i",
        null,
        fbt._(
          /* __FBT__ start */ {
            jsfbt: {
              t: {
                desc:
                  'In the phrase: "{=Where do}{=spaces}{=go?} Good {=question} !"',
                text: "question",
              },
              m: [],
            },
            project: "",
          } /* __FBT__ end */
        )
      )
    ),
  ]
);

`;

exports[`fbt preserveWhitespace argument should NOT preserve whitespaces that do not neighbor raw text jsx elements with string variation arguments 1`] = `
var fbt_sv_arg_0;

const fbt = require("fbt");

var x =
  ((fbt_sv_arg_0 = fbt._plural(this.state.ex1Count, "number")),
  fbt._(
    /* __FBT__ start */ {
      jsfbt: {
        t: {
          "*": {
            desc: "d",
            text: "{=There should be}{=[number] spaces} !",
            tokenAliases: {
              "=There should be": "=m0",
              "=[number] spaces": "=m1",
            },
          },
          _1: {
            desc: "d",
            text: "{=There should be}{=a space} !",
            tokenAliases: { "=There should be": "=m0", "=a space": "=m1" },
          },
        },
        m: [{ token: "number", type: 2, singular: true }],
      },
      project: "",
    } /* __FBT__ end */,
    [
      fbt_sv_arg_0,
      fbt._implicitParam(
        "=m0",
        /*#__PURE__*/ React.createElement(
          "span",
          null,
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: {
                  "*": {
                    desc:
                      'In the phrase: "{=There should be}{=[number] spaces} !"',
                    text: "There should be",
                  },
                  _1: {
                    desc: 'In the phrase: "{=There should be}{=a space} !"',
                    text: "There should be",
                  },
                },
                m: [{ token: "number", type: 2, singular: true }],
              },
              project: "",
            } /* __FBT__ end */,
            [fbt_sv_arg_0]
          )
        )
      ),
      fbt._implicitParam(
        "=m1",
        /*#__PURE__*/ React.createElement(
          "b",
          null,
          fbt._(
            /* __FBT__ start */ {
              jsfbt: {
                t: {
                  "*": {
                    desc:
                      'In the phrase: "{=There should be}{=[number] spaces} !"',
                    text: "{number} spaces",
                  },
                  _1: {
                    desc: 'In the phrase: "{=There should be}{=a space} !"',
                    text: "a space",
                  },
                },
                m: [{ token: "number", type: 2, singular: true }],
              },
              project: "",
            } /* __FBT__ end */,
            [fbt_sv_arg_0]
          )
        )
      ),
    ]
  ));

`;
